package internal

import (
	"context"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/s3"
)

func CreateS3(bucket string) {
	cfg, err := config.LoadDefaultConfig(context.TODO())

	if err != nil {
		fmt.Printf("‚ùå Erro ao carregar configura√ß√µes AWS: %v\n", err)
		fmt.Println("üí° Configure suas credenciais AWS:")
		fmt.Println("   ‚Ä¢ aws configure")
		fmt.Println("   ‚Ä¢ ou exporte as vari√°veis:")
		fmt.Println("     export AWS_ACCESS_KEY_ID=sua-access-key")
		fmt.Println("     export AWS_SECRET_ACCESS_KEY=sua-secret-key")
		fmt.Println("     export AWS_DEFAULT_REGION=us-east-1")
		return
	}

	// Verificar se regi√£o est√° configurada
	if cfg.Region == "" {
		fmt.Println("‚ùå Regi√£o AWS n√£o configurada!")
		fmt.Println("üí° Configure a regi√£o:")
		fmt.Println("   ‚Ä¢ aws configure set region us-east-1")
		fmt.Println("   ‚Ä¢ ou export AWS_DEFAULT_REGION=us-east-1")
		return
	}

	client := s3.NewFromConfig(cfg)

	_, err = client.CreateBucket(context.TODO(), &s3.CreateBucketInput{
		Bucket: aws.String(bucket),
	})

	if err != nil {
		errorMsg := err.Error()

		if strings.Contains(errorMsg, "resolve auth scheme") || strings.Contains(errorMsg, "credential") {
			fmt.Printf("‚ùå Erro de credenciais AWS: %v\n", err)
			fmt.Println("üí° Configure suas credenciais AWS:")
			fmt.Println("   ‚Ä¢ aws configure")
			fmt.Println("   ‚Ä¢ ou verifique suas vari√°veis de ambiente:")
			fmt.Println("     AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION")
		} else if strings.Contains(errorMsg, "Invalid region") || strings.Contains(errorMsg, "DNS name") {
			fmt.Printf("‚ùå Regi√£o AWS inv√°lida: %v\n", err)
			fmt.Println("üí° Configure uma regi√£o v√°lida:")
			fmt.Println("   ‚Ä¢ aws configure set region us-east-1")
			fmt.Println("   ‚Ä¢ ou export AWS_DEFAULT_REGION=us-east-1")
		} else if strings.Contains(errorMsg, "BucketAlreadyExists") {
			fmt.Printf("‚ùå Bucket '%s' j√° existe ou nome n√£o dispon√≠vel\n", bucket)
			fmt.Println("üí° Use um nome √∫nico para o bucket")
		} else {
			fmt.Printf("‚ùå Erro ao criar bucket S3: %v\n", err)
		}
		return
	}

	fmt.Println("‚úÖ S3 Bucket criado:", bucket)
}

func DeleteS3(bucket string) {
	cfg, err := config.LoadDefaultConfig(context.TODO())

	if err != nil {
		fmt.Printf("‚ùå Erro ao carregar configura√ß√µes AWS: %v\n", err)
		fmt.Println("üí° Configure suas credenciais AWS primeiro")
		return
	}

	if cfg.Region == "" {
		fmt.Println("‚ùå Regi√£o AWS n√£o configurada!")
		fmt.Println("üí° Configure: export AWS_DEFAULT_REGION=us-east-1")
		return
	}

	client := s3.NewFromConfig(cfg)

	_, err = client.DeleteBucket(context.TODO(), &s3.DeleteBucketInput{
		Bucket: aws.String(bucket),
	})

	if err != nil {
		errorMsg := err.Error()

		if strings.Contains(errorMsg, "NoSuchBucket") {
			fmt.Printf("‚ùå Bucket '%s' n√£o encontrado\n", bucket)
		} else if strings.Contains(errorMsg, "BucketNotEmpty") {
			fmt.Printf("‚ùå Bucket '%s' n√£o est√° vazio. Remova todos os objetos primeiro\n", bucket)
		} else {
			fmt.Printf("‚ùå Erro ao deletar bucket: %v\n", err)
		}
		return
	}

	fmt.Println("üóëÔ∏è Bucket AWS deletado:", bucket)
}
